Map, Filter e Reduce

Método Map
É um meio de criar um array novo com base em um array antigo, sem modificar o array original

Sintaxe

array.map(callback, thisArg)
    callback(item, index, array)*não preciso usar todos, posso usar apenas o item*

callback: função a ser executada em cada elemento
thisArg(opcional): valor do "this" dentro da função de callback(pouco usado no mercado de trabalho)

Map vs forEach

Usando map
const array = [1, 2, 3, 4, 5];
array.map((item) => item * 2); //retorno:[2, 4, 6, 8, 10];

Usando forEach
const array = [1, 2, 3, 4, 5];
array.fotEach((item) => item * 2); //retorno: underfined

usando map ele criou outro array com as informações, e usando o forEach o array ainda não foi criado, então a principal diferença e o valor retornado, e eu preciso considerar se o array auxiliar será necessário.

Método Filter

Seria quase igual ao map, porem podendo colocar um filtro, onde seguira uma espécie de regra para determinar quais dados do array serão usados.

Sintaxe

array.filter(callback, thisArg)

ex.

const fruta = ['maçã fuji', 'maçã verde', 'laranja', 'abacaxi',];
frutas.filter((fruta) => fruta.includes('maçã'))
//retorno: ['maçã fuji', 'maçã verde'];

Como o item é sempre o primeiro argumento eu não preciso famalo de item, posso dar o nome que eu quiser, no exemplo acima eu dei o nome de fruta. 

Método .includes é usando para pedir strings dentro do array que incluam a palavra maçã, se não colocasse o .includes e apenas maçã, não teria fruta nenhuma que o nome é só maçã.

Método Reduce

Diferente do map e do filter, o reduce não ira criar um novo array com base em outro array, o reduce irá reduzir tudo que está dentro do array em um valor único.

Sintaxe

array.reduce(callbackFn, initialValue)

callback: função a ser executada a partir do acumulador

 initialValue: valor sobre o qual o retorno final irá atuar

const callbackFn = function(accumulator, currentValue, index, array) {
// do something
}
array.reduce(callbackFn, initialValue)

accumulator = valor acumulador
currentValue = Valor atual
index = indice do valor atual
array = o array original onde a função de reduce foi chamada

*O initialValue seria um valor que você quer acrescentar além dos valores do array*
*Não precisa mandar todos os valores*
*Accumulator e currentValue são os mais importantes*
*Se o initialValue não for declarado, é presumido que o primeiro valor do array é o accumulator*

EXERCÍCIO 1
Usar o map junto do argumento this:

const maca = {
    value: 2,
}

const laranja = {
    value: 3,
}

function mapComThis(arr, thisArg) {
    return arr.map(function (item) {
        return item * this.value;
    }, thisArg);
}

const nums = [1,2];

console.log('this => maçã', mapComThis(nums, maca));

console.log('this => laranja', mapComThis(nums, laranja));

EXERCÍCIO 2
Usar o map sem o argumento this:

Function mapSemThis(arr) {
    return arr.map(function(item) {
        return item * 2;
    });
}

const nums = [2, 4, 6, 8, 10];
console.log(mapSemThis(nums));

EXERCÍCIO 3
Usando o filter, filtre e retorne todos os números pares de um array:

    function filtraPares(arr) {
        return arr.filter(callback);
    }

    function callback(item) {
        return item % 2 === 0;
    }

    const meuArray = [1, 23, 55, 67, 30, 2, 4];

*Poderia ter colocado toda a função callback dentro do parentes. Ex
 return arr.filter(function callback(item) {
        return item % 2 === 0;
    })

*Poderia usar o argumento this no filter também.

EXERCÍCIO 4
Primeiro usando o reduce some todos os valores de um array:

function somaNumeros(arr) {
    return arr.reduce(function (prev,current) {
        console.log({ prev });
        console.log({ current });
        return prev + current;
    },0);*ESSE 0 É O VALOR INICIAL   
}

const arr = [1, 2];

console.log(somaNumeros(arr));

*Para fazer sem valor inicial é só não colocar nada e fechar os parentes normal.

EXERCÍCIO 4 PARTE 2
Crie uma função que receberá uma lista de preços, e um numero representando o saldo disponível, calcule quanto sobrará após gastar todo o saldo com os produtos da lista:


const lista = [
    {
        name: 'sabao em po',
        preco: 30,
    },
    {
        name: 'cereal',
        preco: 12,
    },
    {
        name: 'toalha',
        preco: 30,
    },
];

const saldoDisponivel = 100;

function calculaSaldo(saldoDisponivel, lista) {
    return lista.reduce(function (prev, current, index) {
        console.log('rodada ', index + 1);
        console.log({ prev });
        console.log({ curent });
        return prev - current.preco;*SEMPRE ESCOLHER O DADO
    }, saldoDisponivel);
}

console.log(calculaSaldo(saldoDisponivel, lista));

**SEMPRE ESCOLHER O DADO usando o .preco ou .name por exemplo.
C:\Program Files\Git\bin